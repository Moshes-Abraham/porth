include "std.porth"

const ROWS 10 end
const COLS 20 end

const CELL_EMPTY 1 offset end
const CELL_EGG   1 offset end
const CELL_SNAKE 1 offset end
const COUNT_CELLS reset end
const sizeof(Cell) sizeof(int) end

memory cells sizeof(Cell) ROWS * COLS * end

inline proc cell-at int int -- ptr in
  let x y in
    y COLS * x +
    sizeof(Cell) *
    cells +ptr
  end
end

const Point.x sizeof(int) offset end
const Point.y sizeof(int) offset end
const sizeof(Point) reset end

inline proc @Point ptr -- int int in
  let p in
    p Point.x ptr+ @int
    p Point.y ptr+ @int
  end
end

inline proc !Point int int ptr in
  let x y p in
    x p Point.x ptr+ !int
    y p Point.y ptr+ !int
  end
end

const DIR_UP    1 offset end
const DIR_DOWN  1 offset end
const DIR_LEFT  1 offset end
const DIR_RIGHT 1 offset end
const COUNT_DIRS reset end
const sizeof(Dir) sizeof(int) end

const SNAKE_CAP ROWS COLS * end
memory snake sizeof(Point) SNAKE_CAP * end
memory snake-begin sizeof(int) end
memory snake-size  sizeof(int) end

proc snake-add int int in
  snake-size @int SNAKE_CAP >= if
    here eputs ": You Won!\n" eputs
    1 exit
  end

  let x y in
    CELL_SNAKE
      y COLS * x +
      sizeof(Cell) *
      cells +ptr
    !int

    x y
    snake-begin @int
    snake-size  @int +
    SNAKE_CAP mod
    sizeof(Point) *
    snake +ptr
    !Point

    snake-size inc64
  end
end

proc snake-del in
  snake-size @int 0 <= if
    here eputs ": Assertion Failed: snake underflow!\n" eputs
    1 exit
  end

  snake-begin @int
  sizeof(Point) *
  snake +ptr
  @Point
  let x y in
    CELL_EMPTY
      y COLS * x +
      sizeof(Cell) *
      cells +ptr
    !int

    snake-size dec64
    snake-begin @int
    1 +
    SNAKE_CAP mod
    snake-begin !int
  end
end

memory player-pos sizeof(Point) end
memory player-dir sizeof(Dir) end

memory quit sizeof(bool) end
memory input 1 end

proc step-point ptr int in
  let p dir in
    p @Point
    let x y in
      dir DIR_UP = if
        x
        y 1 -
      else dir DIR_DOWN = if*
        x
        y 1 +
      else dir DIR_LEFT = if*
        x 1 -
        y
      else dir DIR_RIGHT = if*
        x 1 +
        y
      else
        0 0
        here eputs ": unrechable\n" eputs
        1 exit
      end

      let x y in
        x COLS emod
        y ROWS emod
      end
    end
    p !Point
  end
end

proc display in
  0 while dup ROWS < do
    0 while dup COLS < do
      let y x in
        x y cell-at @int
        let cell in
          cell CELL_EMPTY = if
            '.' putch
          else cell CELL_EGG = if*
            '*' putch
          else cell CELL_SNAKE = if*
            '#' putch
          else
            here eputs ": Assertion Failed: unreachable\n" eputs
            1 exit
          end
        end

        y x
      end
      1 +
    end drop
    "\n" puts
    1 +
  end drop
end

proc spawn-egg in
  CELL_EGG
    rand 32 shl COLS mod
    rand 32 shl ROWS mod
    while over over cell-at @int CELL_EMPTY != do
      drop drop
      rand 32 shl COLS mod
      rand 32 shl ROWS mod
    end
  cell-at !int
end

proc main in
  memory delta_time sizeof(timespec) end
  200000000 delta_time timespec.tv_nsec ptr+ !int
  0 delta_time timespec.tv_sec  ptr+ !int

  0 F_GETFL stdin fcntl O_NONBLOCK or
  F_SETFL
  stdin
  fcntl
  drop

  5 5 snake-add
  6 5 snake-add
  7 5 snake-add
  7 5 player-pos !Point
  DIR_RIGHT player-dir !int

  spawn-egg

  while quit @bool lnot do
    display

    1 input stdin read
    let ret in
      ret 1 = if
        input @8
        player-dir @int
        let cmd dir in
          cmd 's' = dir DIR_UP != land if
            DIR_DOWN player-dir !int
          else cmd 'w' = dir DIR_DOWN != land if*
            DIR_UP player-dir !int
          else cmd 'a' = dir DIR_RIGHT != land if*
            DIR_LEFT player-dir !int
          else cmd 'd' = dir DIR_LEFT != land if*
            DIR_RIGHT player-dir !int
          else cmd 'q' = if*
            true quit !bool
          end
        end
      else ret 0 EAGAIN - != if*
        here eputs ": reading command has failed\n" eputs
        1 exit
      end

      player-pos player-dir @int step-point

      player-pos @Point cell-at @int
      let cell in
        cell CELL_SNAKE = if
          "YOU LOST ZULUL\n" puts
          0 exit
        else cell CELL_EGG = if*
          player-pos @Point snake-add
          spawn-egg
        else cell CELL_EMPTY = if*
          snake-del
          player-pos @Point snake-add
        end
      end

      27 putch "[" puts ROWS putu "A" puts
      27 putch "[" puts COLS putu "D" puts

      NULL delta_time 0 CLOCK_MONOTONIC clock_nanosleep drop
    end
  end
end
